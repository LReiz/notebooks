diff --git a/uc/uc_interpreter.py b/uc/uc_interpreter.py
index 3396c49..a9a013e 100644
--- a/uc/uc_interpreter.py
+++ b/uc/uc_interpreter.py
@@ -123,7 +123,7 @@ class Interpreter(object):
                         if len(op) == 3:
                             self._copy_data(self.offset, _len, op[2])
                         self.offset += _len
-                elif opcode == 'define':
+                elif opcode.startswith('define'):
                         self.globals[op[1]] = self.offset
                         M[self.offset] = self.pc
                         self.offset += 1
@@ -204,7 +204,7 @@ class Interpreter(object):
         self.offset += size
         self._store_multiple_values(size, target, varname)
 
-    def _push(self):
+    def _push(self, locs):
         # save the addresses of the vars from caller & their last offset
         self.stack.append(self.vars)
         self.sp.append(self.offset)
@@ -213,19 +213,12 @@ class Interpreter(object):
         # and copy the parameters passed to the callee in their local vars.
         # Finally, cleanup the parameters list used to transfer these vars
         self.vars = {}
-        idx = -1
         for idx, val in enumerate(self.params):
             # Note that arrays (size >=1) are passed by reference only.
-            self.vars['%' + str(idx)] = self.offset
+            self.vars[locs[idx]] = self.offset
             M[self.offset] = M[val]
             self.offset += 1
         self.params = []
-
-        # alloc register to the return value & initialize it with 0.
-        self.vars['%' + str(idx+1)] = self.offset
-        M[self.offset] = 0
-        self.offset += 1
-
         self._alloc_labels()
 
     def _pop(self, target):
@@ -321,7 +314,9 @@ class Interpreter(object):
             # alloc the labels with respective pc's
             self._alloc_labels()
         else:
-            self._push()
+            # extract the location names of function args
+            _locs = [el[1] for el in args]
+            self._push(_locs)
 
     def run_elem_int(self, source, index, target):
         self._alloc_reg(target)
@@ -334,8 +329,7 @@ class Interpreter(object):
     run_elem_char = run_elem_int
 
     def run_get_int(self, source, target):
-        # We never generate this code without * (ref)
-        # but we need to define it
+        # We never generate this code without * (ref) but we need to define it
         pass
 
     def run_get_int_(self, source, target, **kwargs):
@@ -417,6 +411,14 @@ class Interpreter(object):
             print("Illegal input value.", flush=True)
         return v2
 
+    def run_read_int(self, source):
+        _value = self._read_int()
+        self._store_value(source, _value)
+
+    def run_read_int_(self, source, **kwargs):
+        _value = self._read_int()
+        self._store_deref(source, _value)
+
     def _read_float(self):
         global inputline
         self._get_input()
@@ -431,14 +433,6 @@ class Interpreter(object):
             print("Illegal input value.", flush=True)
         return v2
 
-    def run_read_int(self, source):
-        _value = self._read_int()
-        self._store_value(source, _value)
-
-    def run_read_int_(self, source, **kwargs):
-        _value = self._read_int()
-        self._store_deref(source, _value)
-
     def run_read_float(self, source):
         _value = self._read_float()
         self._store_value(source, _value)
